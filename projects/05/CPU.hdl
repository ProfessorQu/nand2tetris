// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=notOp);
    Not(in=notOp, out=op);  // Check op code
    
    // D Register
    And(a=op, b=instruction[4], out=loadD);
    
    DRegister(in=aluOut, load=loadD, out=aluIn1);

    // A Register
    Mux16(a=instruction, b=aluOut, sel=op, out=aIn);

    // Check if A shoudl get a new value
    And(a=op, b=instruction[5], out=instructionLoadA);
    Or(a=notOp, b=instructionLoadA, out=loadA);

    ARegister(in=aIn, load=loadA, out=aOut, out[0..14]=addressM);

    Mux16(a=aOut, b=inM, sel=instruction[12], out=aluIn2);

    // outM
    ALU(
        x=aluIn1, y=aluIn2,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6],
        out=aluOut, out=outM, zr=outZero, ng=outNeg
    );
    
    // writeM
    And(a=instruction[3], b=op, out=writeM);

    // PC
    Not(in=outNeg, out=outNotNeg);              // Test if output is not negative
    Not(in=outZero, out=outNotZero);            // Test if output is non-zero

    And(a=outNotNeg, b=outNotZero, out=outPos); // Test if output is positive

    And(a=outPos, b=instruction[0], out=checkPos);      // If jmp3 and positive
    And(a=outZero, b=instruction[1], out=checkZero);    // If jmp2 and zero
    And(a=outNeg, b=instruction[2], out=checkNeg);      // If jmp1 and negative
    
    Or(a=checkPos, b=checkZero, out=checkPosOrZero);   // Combine 
    Or(a=checkPosOrZero, b=checkNeg, out=pcPreload);

    And(a=pcPreload, b=op, out=notInc, out=pcLoad); // Check if op code is 1

    Not(in=notInc, out=inc);    // Check if should increment PC

    PC(in=aOut, load=pcLoad, inc=inc, reset=reset, out[0..14]=pc);
}